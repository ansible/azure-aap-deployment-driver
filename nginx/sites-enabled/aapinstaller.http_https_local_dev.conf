# This config file is initially named .disabled and will be renamed to .conf when SSL is ready

server {
    listen                  443 ssl http2 default_server;
    server_name             _;
    root                    /var/www/aapinstaller/public;

    # SSL
    ssl_certificate         /etc/letsencrypt/live/aapinstaller/fullchain.pem;
    ssl_certificate_key     /etc/letsencrypt/live/aapinstaller/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/aapinstaller/chain.pem;

    # security
    include                 nginxconfig.io/security.conf;

    # logging
    access_log              /var/log/nginx/aapinstaller.access.log;
    error_log               /var/log/nginx/aapinstaller.error.log warn;

    # reverse proxy
    location /api/ {
        proxy_pass http://127.0.0.1:9090/;
        include    nginxconfig.io/proxy.conf;
    }

    location /status {
        default_type text/plain;
        return 200 'OK';
    }

    # location specific to application files, no check for session
    location ~* \.(json|ico|png|jpg|jpeg|svg|txt|js|map|css|html)$ {
        # serve what ever was requests, or index.html or 404 error
        try_files $uri =404;
    }

    # location for starting SSO flow
    location = /sso {
        # rewrite so it goes to the backend which will then send back a redirect
        rewrite ^/sso$ /api/login last;
    }

    # location for SSO callback
    location = /ssocallback {
        # If the request came with SSO data, send to backend which will then send a redirect to proper URI
        if ($arg_session_state != "") {
            rewrite ^/ssocallback$ /api/ssocallback last;
        }
        # TODO Check if we need redirect to main page or just return an error
        # Otherwise redirect to home page
        return 302 /;
    }

    # location specific to login(exactly matching the /), does not check for authenticated
    location = / {
        index  index.html;
        try_files /index.html =404;
    }

    # main location for any remaining URI, checks for valid session
    location = /welcome {
        auth_request /authcheck;

        # serve what ever was requested, or index.html or 404 error
        try_files $uri $uri/ /index.html =404;
    }

    # main location for any remaining URI, checks for valid session
    location / {
        auth_request /authchecksso;

        # serve what ever was requested, or index.html or 404 error
        try_files $uri $uri/ /index.html =404;
    }

    # location for performing check of the authentication status, returns 401 if not authenticated
    location = /authcheck {
        internal;
        proxy_pass              http://127.0.0.1:9090/authcheck;
        include                 nginxconfig.io/proxy.conf;
        proxy_pass_request_body off;
        proxy_set_header        Content-Length "";

    }

    # location for performing check of the authentication and SSO status, returns 401 if not authenticated
    location = /authchecksso {
        internal;
        proxy_pass              http://127.0.0.1:9090/authchecksso;
        include                 nginxconfig.io/proxy.conf;
        proxy_pass_request_body off;
        proxy_set_header        Content-Length "";

    }

    # make error 401 passed as is (=) to the named location @error401
    error_page 401 = @error401;

    # error page location
    location @error401 {
        # TODO Add more sophisticated handling to differentiate between the
        #   authentication checks performed and respond with different redirects

        return 302 /;
    }

    # additional config
    include nginxconfig.io/general.conf;
}

# HTTP redirect
server {
    listen      80;
    server_name _;

    location / {
        return 301 https://$host$request_uri;
    }

    location /status {
        add_header Content-Type text/plain;
        return 200 'OK';
    }
}
